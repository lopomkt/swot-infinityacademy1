import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log('üöÄ Iniciando edge function openrouter-analysis...');

    // Verificar autentica√ß√£o
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      throw new Error('Token de autoriza√ß√£o n√£o fornecido')
    }

    // Inicializar Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: authHeader } } }
    )

    // Verificar usu√°rio autenticado
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser()
    if (userError || !user) {
      console.error('‚ùå Erro de autentica√ß√£o:', userError);
      throw new Error('Usu√°rio n√£o autenticado')
    }

    console.log('‚úÖ Usu√°rio autenticado:', user.id);

    const { formData } = await req.json()
    if (!formData) {
      throw new Error('Dados do formul√°rio n√£o fornecidos')
    }

    console.log('üìù Dados recebidos para an√°lise:', {
      empresa: formData.identificacao?.nomeEmpresa,
      forcas: formData.forcas?.respostas?.length || 0,
      fraquezas: formData.fraquezas?.pontos_inconsistentes?.length || 0,
      oportunidades: formData.oportunidades?.respostas?.length || 0,
      ameacas: formData.ameacas?.respostas?.length || 0
    });

    // Construir prompt estruturado para GPT-4o-mini
    const prompt = `Voc√™ √© um consultor estrat√©gico especialista em an√°lise SWOT. Gere um relat√≥rio estrat√©gico completo no formato EXATO abaixo.

DADOS DA EMPRESA:
Nome: ${formData.identificacao?.nomeEmpresa || 'N√£o informado'}
Setor: ${formData.identificacao?.segmento || 'N√£o informado'}
Tempo de Mercado: ${formData.identificacao?.tempoDeMercado || 'N√£o informado'}
Situa√ß√£o Financeira: ${formData.saudeFinanceira?.maturidade_financeira || 'N√£o informado'}

FOR√áAS IDENTIFICADAS:
${formData.forcas?.respostas?.map((f, i) => `${i + 1}. ${f}`).join('\n') || 'Nenhuma for√ßa identificada'}

FRAQUEZAS IDENTIFICADAS:
${formData.fraquezas?.pontos_inconsistentes?.map((f, i) => `${i + 1}. ${f}`).join('\n') || 'Nenhuma fraqueza identificada'}

OPORTUNIDADES:
${formData.oportunidades?.respostas?.map((o, i) => `${i + 1}. ${o}`).join('\n') || 'Nenhuma oportunidade identificada'}

AMEA√áAS:
${formData.ameacas?.respostas?.map((a, i) => `${i + 1}. ${a}`).join('\n') || 'Nenhuma amea√ßa identificada'}

RESPONDA SEGUINDO EXATAMENTE ESTE FORMATO (use os delimitadores ### obrigatoriamente):

### MATRIZ SWOT
**FOR√áAS:**
- [an√°lise detalhada de cada for√ßa com recomenda√ß√µes estrat√©gicas]

**FRAQUEZAS:**
- [an√°lise detalhada de cada fraqueza com planos de melhoria espec√≠ficos]

**OPORTUNIDADES:**
- [an√°lise detalhada de cada oportunidade com estrat√©gias de aproveitamento]

**AMEA√áAS:**
- [an√°lise detalhada de cada amea√ßa com planos de mitiga√ß√£o]

### DIAGN√ìSTICO CONSULTIVO
[An√°lise executiva da situa√ß√£o atual da empresa, identificando pontos cr√≠ticos, potenciais e recomenda√ß√µes estrat√©gicas personalizadas. M√≠nimo 3 par√°grafos detalhados com linguagem consultiva profissional.]

### PLANO DE A√á√ÉO A/B/C
**A√á√ïES DE CURTO PRAZO (30-90 dias):**
1. [A√ß√£o espec√≠fica com justificativa e recursos necess√°rios]
2. [A√ß√£o espec√≠fica com justificativa e recursos necess√°rios]
3. [A√ß√£o espec√≠fica com justificativa e recursos necess√°rios]

**A√á√ïES DE M√âDIO PRAZO (6-12 meses):**
1. [A√ß√£o estrat√©gica com planejamento detalhado]
2. [A√ß√£o estrat√©gica com planejamento detalhado]
3. [A√ß√£o estrat√©gica com planejamento detalhado]

**M√âTRICAS DE ACOMPANHAMENTO:**
- [Indicadores espec√≠ficos para medir progresso das a√ß√µes]`

    console.log('ü§ñ Enviando requisi√ß√£o para OpenRouter...');

    // Chamar OpenRouter API com GPT-4o-mini
    const openrouterResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer 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',
        'Content-Type': 'application/json',
        'X-Title': 'SWOT Insights Analysis - GPT4o-mini',
      },
      body: JSON.stringify({
        model: 'openai/gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um consultor estrat√©gico especialista em an√°lise SWOT. Sempre responda seguindo EXATAMENTE o formato solicitado com os delimitadores ###. Use linguagem profissional, clara e orientada para a√ß√£o.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 4000,
        temperature: 0.7,
      })
    })

    if (!openrouterResponse.ok) {
      const errorText = await openrouterResponse.text()
      console.error('‚ùå Erro na API OpenRouter:', errorText)
      throw new Error(`Erro na API OpenRouter: ${openrouterResponse.status} - ${errorText}`)
    }

    const openrouterData = await openrouterResponse.json()
    const analysisContent = openrouterData.choices[0]?.message?.content

    if (!analysisContent) {
      console.error('‚ùå Resposta vazia da OpenRouter:', openrouterData);
      throw new Error('Resposta vazia da API OpenRouter')
    }

    console.log('‚úÖ An√°lise recebida da OpenRouter, processando...');

    // Estruturar resultado final (apenas OpenRouter)
    const resultado = {
      ai_block_pronto: true,
      openrouter_prompt_ok: true,
      analise_completa: {
        diagnostico_textual: diagnostico,
        matriz_swot: matrizSwot,
        planos_acao: planoAcao,
        raw_response: analysisContent
      },
      timestamp: new Date().toISOString(),
      model_used: 'openai/gpt-4o-mini'
    }

    console.log('‚úÖ Resultado estruturado com OpenRouter apenas');

    return new Response(
      JSON.stringify({ success: true, resultado }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )

  } catch (error) {
    console.error('‚ùå Erro no edge function OpenRouter:', error)
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Erro interno do servidor OpenRouter' 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    )
  }
})
