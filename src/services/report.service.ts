
import { supabase } from '@/integrations/supabase/client';
import { ResultadoFinalData } from '@/types/formData';

/**
 * Dados de entrada para cria√ß√£o de relat√≥rio
 */
interface ReportData {
  id?: string;
  user_id: string;
  dados: any;
  resultado_final?: any;
  criado_em?: string;
}

/**
 * Item de lista de relat√≥rios
 */
interface ReportListItem {
  id: string;
  criado_em: string;
  resultado_final: any;
  dados: {
    identificacao?: {
      nomeEmpresa?: string;
    };
  };
}

/**
 * Servi√ßo para gest√£o de relat√≥rios e hist√≥rico
 * Implementa CRUD completo com valida√ß√£o RLS para seguran√ßa
 */
class ReportService {
  /**
   * Cria um novo relat√≥rio no banco de dados
   * @param reportData Dados do relat√≥rio a ser criado
   * @returns ID do relat√≥rio criado ou null em caso de erro
   */
  async createReport(reportData: Omit<ReportData, 'id' | 'criado_em'>): Promise<string | null> {
    try {
      console.log("üìÑ Criando novo relat√≥rio...");

      // Validar dados obrigat√≥rios
      if (!reportData.user_id || !reportData.dados) {
        console.error("‚ùå Dados obrigat√≥rios ausentes");
        throw new Error("user_id e dados s√£o obrigat√≥rios");
      }

      const { data, error } = await supabase
        .from('relatorios')
        .insert({
          user_id: reportData.user_id,
          dados: reportData.dados,
          resultado_final: reportData.resultado_final,
        })
        .select('id')
        .single();

      if (error) {
        console.error("‚ùå Erro ao criar relat√≥rio:", error);
        throw new Error(`Falha ao salvar relat√≥rio: ${error.message}`);
      }

      console.log("‚úÖ Relat√≥rio criado com sucesso:", data.id);
      return data.id;
    } catch (error: any) {
      console.error("‚ùå Erro na cria√ß√£o do relat√≥rio:", error);
      return null;
    }
  }

  /**
   * Busca relat√≥rios do usu√°rio com pagina√ß√£o
   * @param userId ID do usu√°rio (RLS garante acesso apenas aos pr√≥prios dados)
   * @param limit Limite de resultados por p√°gina
   * @returns Lista de relat√≥rios do usu√°rio
   */
  async getReportsByUser(userId: string, limit: number = 10): Promise<ReportListItem[]> {
    try {
      console.log(`üìã Buscando relat√≥rios do usu√°rio ${userId}...`);

      if (!userId) {
        console.error("‚ùå userId √© obrigat√≥rio");
        return [];
      }

      const { data, error } = await supabase
        .from('relatorios')
        .select('id, criado_em, resultado_final, dados')
        .eq('user_id', userId)
        .order('criado_em', { ascending: false })
        .limit(limit);

      if (error) {
        console.error("‚ùå Erro ao buscar relat√≥rios:", error);
        throw new Error(`Falha ao carregar relat√≥rios: ${error.message}`);
      }

      console.log(`‚úÖ ${data?.length || 0} relat√≥rios encontrados`);
      return (data || []) as ReportListItem[];
    } catch (error: any) {
      console.error("‚ùå Erro na consulta de relat√≥rios:", error);
      return [];
    }
  }

  /**
   * Busca um relat√≥rio espec√≠fico por ID
   * @param reportId ID do relat√≥rio
   * @param userId ID do usu√°rio (para valida√ß√£o RLS)
   * @returns Dados completos do relat√≥rio ou null
   */
  async getReportById(reportId: string, userId: string): Promise<ReportData | null> {
    try {
      console.log(`üîç Buscando relat√≥rio ${reportId}...`);

      if (!reportId || !userId) {
        console.error("‚ùå reportId e userId s√£o obrigat√≥rios");
        return null;
      }

      const { data, error } = await supabase
        .from('relatorios')
        .select('*')
        .eq('id', reportId)
        .eq('user_id', userId)
        .maybeSingle();

      if (error) {
        console.error("‚ùå Erro ao buscar relat√≥rio:", error);
        throw new Error(`Falha ao carregar relat√≥rio: ${error.message}`);
      }

      if (!data) {
        console.warn("‚ö†Ô∏è Relat√≥rio n√£o encontrado ou acesso negado");
        return null;
      }

      console.log("‚úÖ Relat√≥rio encontrado");
      return data as ReportData;
    } catch (error: any) {
      console.error("‚ùå Erro na consulta do relat√≥rio:", error);
      return null;
    }
  }

  /**
   * Atualiza um relat√≥rio existente
   * @param reportId ID do relat√≥rio
   * @param updateData Dados para atualiza√ß√£o
   * @returns Sucesso da opera√ß√£o
   */
  async updateReport(reportId: string, updateData: Partial<ReportData>): Promise<boolean> {
    try {
      console.log(`‚úèÔ∏è Atualizando relat√≥rio ${reportId}...`);

      if (!reportId) {
        console.error("‚ùå reportId √© obrigat√≥rio");
        return false;
      }

      // Remover campos que n√£o devem ser atualizados
      const { id, criado_em, ...safeUpdateData } = updateData;

      const { error } = await supabase
        .from('relatorios')
        .update(safeUpdateData)
        .eq('id', reportId);

      if (error) {
        console.error("‚ùå Erro ao atualizar relat√≥rio:", error);
        throw new Error(`Falha ao atualizar relat√≥rio: ${error.message}`);
      }

      console.log("‚úÖ Relat√≥rio atualizado com sucesso");
      return true;
    } catch (error: any) {
      console.error("‚ùå Erro na atualiza√ß√£o do relat√≥rio:", error);
      return false;
    }
  }

  /**
   * Remove um relat√≥rio permanentemente
   * @param reportId ID do relat√≥rio
   * @param userId ID do usu√°rio (para valida√ß√£o RLS)
   * @returns Sucesso da opera√ß√£o
   */
  async deleteReport(reportId: string, userId: string): Promise<boolean> {
    try {
      console.log(`üóëÔ∏è Deletando relat√≥rio ${reportId}...`);

      if (!reportId || !userId) {
        console.error("‚ùå reportId e userId s√£o obrigat√≥rios");
        return false;
      }

      const { error } = await supabase
        .from('relatorios')
        .delete()
        .eq('id', reportId)
        .eq('user_id', userId);

      if (error) {
        console.error("‚ùå Erro ao deletar relat√≥rio:", error);
        throw new Error(`Falha ao deletar relat√≥rio: ${error.message}`);
      }

      console.log("‚úÖ Relat√≥rio deletado com sucesso");
      return true;
    } catch (error: any) {
      console.error("‚ùå Erro na dele√ß√£o do relat√≥rio:", error);
      return false;
    }
  }

  /**
   * Conta o total de relat√≥rios do usu√°rio
   * @param userId ID do usu√°rio
   * @returns N√∫mero total de relat√≥rios
   */
  async getTotalReportsCount(userId: string): Promise<number> {
    try {
      console.log(`üìä Contando relat√≥rios do usu√°rio ${userId}...`);

      if (!userId) {
        console.error("‚ùå userId √© obrigat√≥rio");
        return 0;
      }

      const { count, error } = await supabase
        .from('relatorios')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId);

      if (error) {
        console.error("‚ùå Erro ao contar relat√≥rios:", error);
        return 0;
      }

      const totalCount = count || 0;
      console.log(`‚úÖ Total de ${totalCount} relat√≥rios encontrados`);
      return totalCount;
    } catch (error: any) {
      console.error("‚ùå Erro na contagem de relat√≥rios:", error);
      return 0;
    }
  }

  /**
   * Valida se os dados do relat√≥rio est√£o estruturados corretamente
   * @param reportData Dados a serem validados
   * @returns true se v√°lidos, false caso contr√°rio
   */
  validateReportData(reportData: any): boolean {
    if (!reportData || typeof reportData !== 'object') {
      console.error("‚ùå Dados do relat√≥rio inv√°lidos");
      return false;
    }

    // Verifica√ß√µes b√°sicas de estrutura
    const hasIdentificacao = reportData.identificacao && 
      Object.keys(reportData.identificacao).length > 0;
    
    const hasForcas = reportData.forcas && 
      (reportData.forcas.respostas?.length > 0 || reportData.forcas.forca1);
    
    const hasFraquezas = reportData.fraquezas && 
      (reportData.fraquezas.pontos_inconsistentes?.length > 0 || reportData.fraquezas.fraqueza1);

    const isValid = hasIdentificacao && hasForcas && hasFraquezas;
    
    if (!isValid) {
      console.warn("‚ö†Ô∏è Dados do relat√≥rio incompletos");
    }

    return isValid;
  }
}

export const reportService = new ReportService();
