
import { supabase } from '@/integrations/supabase/client';
import { User, Session } from '@supabase/supabase-js';

/**
 * Resultado de opera√ß√µes de autentica√ß√£o
 */
interface AuthResult {
  success: boolean;
  message: string;
  user?: User | null;
  session?: Session | null;
}

/**
 * Dados do usu√°rio na tabela users
 */
interface UserData {
  id: string;
  email: string;
  nome_empresa: string;
  is_admin: boolean;
  data_validade: string;
  data_entrada: string;
  ativo: boolean;
  subscription_status?: string;
  subscription_expires_at?: string;
}

/**
 * Servi√ßo de autentica√ß√£o integrado com Supabase
 * VERS√ÉO SIMPLIFICADA - Foco na estabilidade do login
 */
class AuthService {
  private pollingInterval: NodeJS.Timeout | null = null;
  private readonly POLLING_INTERVAL_MS = 30000; // 30 segundos
  private readonly MAX_RETRIES = 3;
  private readonly RETRY_DELAY = 1000; // 1 segundo

  /**
   * Realiza login do usu√°rio - FLUXO SIMPLIFICADO
   * @param email Email do usu√°rio
   * @param password Senha do usu√°rio
   * @param rememberMe Se true, mant√©m sess√£o ativa por mais tempo
   * @returns Resultado da autentica√ß√£o
   */
  async signIn(email: string, password: string, rememberMe: boolean = false): Promise<AuthResult> {
    try {
      console.log("üîê [AuthService] Iniciando login para:", email);

      // ETAPA 1: Autentica√ß√£o b√°sica no Supabase Auth
      const { data, error } = await supabase.auth.signInWithPassword({
        email: email.trim().toLowerCase(),
        password,
      });

      if (error) {
        console.error("‚ùå [AuthService] Erro na autentica√ß√£o Supabase:", error.message);
        return {
          success: false,
          message: this.getErrorMessage(error.message),
        };
      }

      if (!data.user || !data.session) {
        console.error("‚ùå [AuthService] Dados de autentica√ß√£o inv√°lidos");
        return {
          success: false,
          message: "Falha na autentica√ß√£o - dados inv√°lidos",
        };
      }

      console.log("‚úÖ [AuthService] Autentica√ß√£o Supabase bem-sucedida para:", data.user.email);

      // ETAPA 2: Configurar persist√™ncia se solicitado
      if (rememberMe) {
        try {
          localStorage.setItem('supabase.auth.token', data.session.access_token);
          localStorage.setItem('remember_me', 'true');
          console.log("üíæ [AuthService] Sess√£o configurada para persistir");
        } catch (err) {
          console.warn("‚ö†Ô∏è [AuthService] Falha ao configurar persist√™ncia:", err);
        }
      }

      // ETAPA 3: Retornar sucesso IMEDIATAMENTE
      // A valida√ß√£o de userData ser√° feita em background pelo useAuthState
      return {
        success: true,
        message: "Login realizado com sucesso",
        user: data.user,
        session: data.session,
      };

    } catch (error: any) {
      console.error("‚ùå [AuthService] Erro interno no login:", error);
      return {
        success: false,
        message: "Erro interno do servidor",
      };
    }
  }

  /**
   * Busca dados do usu√°rio com retry autom√°tico
   * @param userId ID do usu√°rio
   * @param retryCount Contador de tentativas
   * @returns Dados do usu√°rio ou null
   */
  async fetchUserData(userId: string, retryCount: number = 0): Promise<UserData | null> {
    try {
      console.log(`üîç [AuthService] Buscando dados do usu√°rio (tentativa ${retryCount + 1}):`, userId);

      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .maybeSingle();

      if (error) {
        console.error("‚ùå [AuthService] Erro ao buscar dados do usu√°rio:", error);
        
        // Retry autom√°tico em caso de erro
        if (retryCount < this.MAX_RETRIES) {
          console.log(`üîÑ [AuthService] Tentando novamente em ${this.RETRY_DELAY}ms...`);
          await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
          return this.fetchUserData(userId, retryCount + 1);
        }
        
        return null;
      }

      if (!data) {
        console.warn("‚ö†Ô∏è [AuthService] Usu√°rio n√£o encontrado na tabela users:", userId);
        
        // Retry para casos de eventual inconsist√™ncia
        if (retryCount < this.MAX_RETRIES) {
          console.log(`üîÑ [AuthService] Retry para usu√°rio n√£o encontrado em ${this.RETRY_DELAY}ms...`);
          await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
          return this.fetchUserData(userId, retryCount + 1);
        }
        
        return null;
      }

      console.log("‚úÖ [AuthService] Dados do usu√°rio obtidos:", {
        email: data.email,
        nome_empresa: data.nome_empresa,
        is_admin: data.is_admin,
        ativo: data.ativo
      });

      return data;
    } catch (error: any) {
      console.error("‚ùå [AuthService] Erro na consulta de usu√°rio:", error);
      
      // Retry em caso de erro de rede
      if (retryCount < this.MAX_RETRIES) {
        console.log(`üîÑ [AuthService] Retry por erro de rede em ${this.RETRY_DELAY}ms...`);
        await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
        return this.fetchUserData(userId, retryCount + 1);
      }
      
      return null;
    }
  }

  /**
   * Realiza logout do usu√°rio e limpa dados armazenados
   */
  async signOut(): Promise<void> {
    try {
      console.log("üö™ [AuthService] Executando logout...");
      
      this.stopPolling();
      
      // Limpar dados locais
      try {
        localStorage.removeItem('supabase.auth.token');
        localStorage.removeItem('remember_me');
        sessionStorage.clear();
      } catch (err) {
        console.warn("‚ö†Ô∏è [AuthService] Erro ao limpar storage local:", err);
      }
      
      await supabase.auth.signOut();
      
      console.log("‚úÖ [AuthService] Logout realizado com sucesso");
    } catch (error: any) {
      console.error("‚ùå [AuthService] Erro no logout:", error);
    }
  }

  /**
   * Obt√©m a sess√£o atual do usu√°rio
   * @returns Sess√£o ativa ou null
   */
  async getUserSession(): Promise<Session | null> {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      return session;
    } catch (error: any) {
      console.error("‚ùå [AuthService] Erro ao obter sess√£o:", error);
      return null;
    }
  }

  /**
   * Obt√©m o usu√°rio atual
   * @returns Usu√°rio ativo ou null
   */
  async getCurrentUser(): Promise<User | null> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      return user;
    } catch (error: any) {
      console.error("‚ùå [AuthService] Erro ao obter usu√°rio:", error);
      return null;
    }
  }

  /**
   * Atualiza o token de acesso da sess√£o
   * @returns Resultado da renova√ß√£o com novos dados
   */
  async refreshSession(): Promise<AuthResult> {
    try {
      console.log("üîÑ [AuthService] Renovando sess√£o...");
      
      const { data, error } = await supabase.auth.refreshSession();
      
      if (error) {
        console.error("‚ùå [AuthService] Erro ao renovar sess√£o:", error);
        return {
          success: false,
          message: "Falha ao renovar sess√£o",
        };
      }

      console.log("‚úÖ [AuthService] Sess√£o renovada com sucesso");
      return {
        success: true,
        message: "Token renovado",
        user: data.user,
        session: data.session,
      };
    } catch (error: any) {
      console.error("‚ùå [AuthService] Erro interno ao renovar token:", error);
      return {
        success: false,
        message: "Erro interno",
      };
    }
  }

  /**
   * Verifica se a assinatura do usu√°rio est√° v√°lida
   * @param dataValidade Data de validade da assinatura
   * @returns true se v√°lida, false se expirada
   */
  isSubscriptionValid(dataValidade: string): boolean {
    try {
      return new Date(dataValidade) > new Date();
    } catch {
      return false;
    }
  }

  /**
   * Inicia polling para monitorar status do usu√°rio em background
   * @param callback Fun√ß√£o chamada a cada verifica√ß√£o
   */
  startPolling(callback: (user: User | null) => void): void {
    this.stopPolling();
    
    console.log("üîÑ [AuthService] Iniciando polling de usu√°rio");
    
    this.pollingInterval = setInterval(async () => {
      try {
        const user = await this.getCurrentUser();
        callback(user);
      } catch (error) {
        console.error("‚ùå [AuthService] Erro no polling:", error);
      }
    }, this.POLLING_INTERVAL_MS);
  }

  /**
   * Para o polling ativo para evitar memory leaks
   */
  stopPolling(): void {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
      console.log("‚èπÔ∏è [AuthService] Polling parado");
    }
  }

  /**
   * Traduz mensagens de erro do Supabase para portugu√™s
   * @param error Mensagem de erro original
   * @returns Mensagem traduzida e amig√°vel
   */
  private getErrorMessage(error: string): string {
    const errorMap: Record<string, string> = {
      'Invalid login credentials': 'Email ou senha incorretos',
      'Email not confirmed': 'Email n√£o confirmado',
      'Too many requests': 'Muitas tentativas. Tente novamente mais tarde',
      'User not found': 'Usu√°rio n√£o encontrado',
      'Invalid email': 'Email inv√°lido',
      'Password should be at least 6 characters': 'A senha deve ter pelo menos 6 caracteres',
      'User already registered': 'Este email j√° est√° cadastrado',
      'signup_disabled': 'Cadastro temporariamente desabilitado',
      'email_address_invalid': 'Endere√ßo de email inv√°lido',
      'weak_password': 'Senha muito fraca',
    };

    return errorMap[error] || `Erro na autentica√ß√£o: ${error}`;
  }
}

export const authService = new AuthService();
